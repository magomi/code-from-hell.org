<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code from Hell]]></title>
  <link href="http://code-from-hell.org/atom.xml" rel="self"/>
  <link href="http://code-from-hell.org/"/>
  <updated>2012-11-17T15:35:33+01:00</updated>
  <id>http://code-from-hell.org/</id>
  <author>
    <name><![CDATA[Marco Grunert]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress-Blog im Github-Repository verwalten]]></title>
    <link href="http://code-from-hell.org/blog/2012/11/17/octopress-blog-im-github-repository-verwalten/"/>
    <updated>2012-11-17T14:07:00+01:00</updated>
    <id>http://code-from-hell.org/blog/2012/11/17/octopress-blog-im-github-repository-verwalten</id>
    <content type="html"><![CDATA[<p>Das gesamte Blog kann an sich ohne weiteres in einem Github-Repository verwaltet werden:</p>

<ul>
<li>  neues Repository auf GitHub einrichten,</li>
<li>  im lokalen Octopress-Verzeichnis die URL des Repositories setzten (&#8220;git init &amp;&amp; git config remote.origin.url &lt;url.des.github.repo>&#8221;),</li>
<li>  den initialen Stand commiten (&#8220;git add . &amp;&amp; git commit -a -m &#8216;&lt;commit.message>&#8217;&#8221;),</li>
<li>  den aktuellen Stand auf den Server pushen (&#8220;git push origin master:master&#8221;).</li>
</ul>


<p>In den Admin-Einstellungen des Repositories auf GitHub kann man andere Nutzer mit Schreibberechtigung hinzufügen. Fertig ist das Mehrbenutzer-Blog.</p>

<p>Das Deployment auf dem Zielserver kann auch direkt aus dem github-Repository erfolgen. Leider geht das nicht ganz so komfortabel, wie wenn man das Blog direkt via <a href="http://octopress.org/docs/deploying/github/">github-Pages betreibt</a>. Der eigentliche Inhalt des Blogs liegt im Unterverzeichnis &#8220;public&#8221;. Grundsätzlich würde es also ausreichen, dieses Unterverzeichnis auszuchecken. Derartige sparse clones werden von git nicht unterstützt. Bleibt also nur, das gesamte Repository auf dem Zielserver auszuchecken und den Webserver nur auf das public Verzeichnis verweisen zu lassen. Einer der großen Vorteile, den Blog auf github-Pages zu betreiben liegt darin, dass bei einem push ins Repository auch gleich der Blogcontent aktualisiert wird. Mit einem kleinen Skript und einem Github-Hook lässt sich das aber recht einfach auf dem eigenen Server nachbauen. Man nehme:</p>

<ul>
<li><p>  ein Skript, dass ins lokale Repository auf dem Webserver wechselt und via &#8220;git pull&#8230;&#8221; den aktuellen Stand auscheckt</p>

<pre><code> #!/bin/sh

 cd /home/serveradmin/website/codefromhell/
 git pull --rebase
 cd -
</code></pre></li>
<li><p>  einen Mini-Webserver, der von einem Github-Hook angesprochen werden kann und das update-Skript aufruft</p>

<pre><code> require 'socket'

 server = TCPServer.new(2000)

 puts "#{Time.now} - listener started"

 while (session = server.accept)
     session.print "HTTP/1.1 200 OK\r\n#{Time.now}\r\nServer: UpdateNotificationListener\r\nContent-Type: text/html\r\n\r\n"
     requestPars = session.gets.chomp.split
     requestMethod = requestPars[0]
     requestUrl = requestPars[1]
     requestProt = requestPars[2]
     puts "#{Time.now} - request recieved: #{requestMethod} #{requestUrl} #{requestProt}"
     if requestMethod == "POST" &amp;&amp; requestUrl == "/checkForNewVersion"
         puts "#{Time.now} - start update of the repository..."
         system('/home/serveradmin/website/updater/update_code-from-hell.org.sh')
         puts "#{Time.now} - ...update done"
     end 
     session.print "&lt;html&gt;thanks, bye&lt;/html&gt;"
     session.close
 end
</code></pre></li>
<li><p>  einen github-WebHook, der auf die passende URL zeigt: http://code-from-hell.org:2000/checkForNewVersion</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Favs]]></title>
    <link href="http://code-from-hell.org/blog/2012/11/11/twitter-favs/"/>
    <updated>2012-11-11T19:52:00+01:00</updated>
    <id>http://code-from-hell.org/blog/2012/11/11/twitter-favs</id>
    <content type="html"><![CDATA[<p><a class="twitter-timeline" href="https://twitter.com/magomi/favorites" data-widget-id="267696520365752320">Favorite Tweets by @magomi</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leseliste - Seven Languages in Seven Weeks]]></title>
    <link href="http://code-from-hell.org/blog/2012/11/11/leseliste-seven-languages-in-seven-weeks/"/>
    <updated>2012-11-11T19:52:00+01:00</updated>
    <id>http://code-from-hell.org/blog/2012/11/11/leseliste-seven-languages-in-seven-weeks</id>
    <content type="html"><![CDATA[<p>Das Lernen neuer (Programmier-)Sprachen geht wesentlich besser von der Hand, wenn man erstmal einen einfachen Einstieg in die Basics bekommen hat. Der Einstieg muss nicht sonderlich tief sein. Wichtig ist es, schnell zu ersten Erfolgserlebnissen in Form kleiner, lauffähiger Programme zu kommen. Darauf baut es sich leicht auf, ohne dass irgendwo auf dem Weg allzu großer Frust aufkommt. Ich halte Weniges für schlimmer als sich erstmal durch große Mengen Specs wühlen zu müssen ehe man mit den ersten Codieraufgaben anfangen kann.</p>

<p>Ich nehme an, für nahezu jede Programmiersprache findet sich ein entsprechendes Tutorial im Netz. Noch besser aber, wenn sich jemand mit genau diesem Ansatz - einen kurzen und knappen, aber ausbaufähigen Schnelleinstieg in verschiedene Programmiersprachen zu bieten - hingesetzt hat und fuer mehrere Sprachen ein passendes Buch geschrieben hat. <a href="http://www.amazon.de/gp/product/193435659X/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=1638&creative=6742&creativeASIN=193435659X&linkCode=as2&tag=pu09c-21">Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages (Pragmatic Programmers)</a><img src="http://www.assoc-amazon.de/e/ir?t=pu09c-21&l=as2&o=3&a=193435659X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><sup>1</sup> bietet genau das. Kurzer Einstieg in Sprachen wir Ruby, Prolog, Scala oder Erlang.</p>

<p>Die angesprochenen 7 Wochen für 7 Sprachen sind sehr arbeitnehmerfreundlich. Ich liege gerade mit defektem Knie rum und mehr als 5 Stunden für den Schnelleinstieg in Ruby musste ich nicht investieren. Man kann den Übungen sicher noch mehr Aufmerksamkeit widmen. Dann sollten aber auch nicht mehr als 8 h Aufwand für eine Sprache notwendig sein. Parallel zur täglichen Arbeit lässt sich das sehr gut über eine Woche verteilen.</p>

<p>Der Schnelleinstieg in Ruby kam mir gerade zupass weil ich mir für die Serverkonfiguration in unserer Firma <a href="http://puppetlabs.com/puppet/what-is-puppet/">Puppet</a> aneignen muss. Puppet selbst ist in Ruby geschrieben und für unserere teils recht speziellen Anforderungen sind eigene Plugins und Erweiterungen zu entwicklen.</p>

<p>Neben dem Einstieg in eine konkrete Sprache ist das Buch auch ein netter Begleiter für die <a href="http://martinfowler.com/bliki/OneLanguage.html">Learn-A-Language-Every-Year</a>-Bewegung. Einfach mal den Horizont erweitern kann nicht schaden. Allein schon die Konzepte anderer Sprachen kennenzulernen hilft einem ganz gut, die &#8220;eigene&#8221; Sprache besser zu verstehen und besser anzuwenden.</p>

<p><sup>1</sup> Affiliate-Link zu Amazon</p>
]]></content>
  </entry>
  
</feed>
